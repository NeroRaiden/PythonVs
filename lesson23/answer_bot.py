# –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –≤–æ–ø—Ä–æ—Å—ã:
# –ö –ø—Ä–∏–º–µ—Ä—É^
# –ü—Ä–∏–≤–µ—Ç
# –ö–∞–∫ –¥–µ–ª–∞?
# –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞ –æ–∫–Ω–æ–º?
# –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?
# –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –¥–Ω–µ–π?
# –ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?
# –∏ —Ç–¥..
# –¥–∞–ª–µ–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è –±–æ—Ç–∞
# –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ 
# –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ 
# –Ω—É–∂–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç–≤–µ—Ç –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

# –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5–∏ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å!

import json
import random

import logging
from aiogram import Bot, Dispatcher, executor, types
from decouple import config


API_TOKEN = config('TELE_API_KEY')

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


inline_photo_button = types.InlineKeyboardMarkup()
inline_photo_button.add(types.InlineKeyboardButton("–ö–æ—Ç–∏–∫–∏", callback_data='cat'), 
            types.InlineKeyboardButton("–°–æ–±–∞—á–∫–∏", callback_data='dog'),
            types.InlineKeyboardButton("–ü–æ–ø—É–≥–∞—ó", callback_data='parrot'))


folder_answers = 'lesson23/answers/'
init_file = json.load(open(folder_answers+'init.json', 'r', encoding='utf-8'))

def get_random_answer(path):
    with open(path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
        return random.choice(lines)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("Hi!\nI'm EchoBot!\nPowered by aiogram.")

@dp.message_handler(commands=['photo'])
async def send_somephoto(message: types.Message):
    await message.reply("–û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–πüëá", reply_markup=inline_photo_button)

@dp.callback_query_handler( lambda c: c.data in ['cat', 'dog', 'parrot'])
async def process_callback_kb1btn1(clq: types.CallbackQuery):
    path_photo = 'lesson23/data/photo/'+clq.data+'.txt'
    photo = get_random_answer(path_photo)
    await clq.message.answer_photo(photo=photo, caption='–í–∏ –æ–±—Ä–∞–ª–∏: '+clq.data, reply_markup=inline_photo_button)
    await clq.message.delete()

@dp.message_handler()
async def echo(message: types.Message):
    if message.text in init_file:
        path = folder_answers+init_file[message.text]
        answer = get_random_answer(path)
        await message.answer(answer)
    else:
        await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)